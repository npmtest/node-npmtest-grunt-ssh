{"/home/travis/build/npmtest/node-npmtest-grunt-ssh/test.js":"/* istanbul instrument in package npmtest_grunt_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ssh/lib.npmtest_grunt_ssh.js":"/* istanbul instrument in package npmtest_grunt_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_ssh = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_ssh = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ssh/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-ssh && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_ssh\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_ssh.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_ssh.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_ssh.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_ssh.__dirname + '/lib.npmtest_grunt_ssh.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ssh/node_modules/grunt-ssh/Gruntfile.js":"module.exports = function (grunt) {\n  'use strict';\n\n  var secret = {};\n  try {\n    secret = grunt.file.readJSON('secret.json');\n  } catch (err) {}\n\n  // Project configuration.\n  grunt.initConfig({\n    // secret.json contains the host, username and password for a server to\n    // run the tests on.\n    secret: secret,\n    test: {\n      files: ['test/**/*.js']\n    },\n    nodeunit: {\n      files: ['test/**/*.js']\n    },\n    beautify: {\n      files: '<%= jshint.files %>'\n    },\n    watch: {\n      files: '<%= jshint.files %>',\n      tasks: 'default'\n    },\n    bump: {\n      options: {\n        pushTo: 'origin'\n      }\n    },\n    jshint: {\n      options: {\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        boss: true,\n        eqnull: true,\n        node: true,\n        globals: {\n          exports: true\n        }\n      },\n      files: ['Gruntfile.js', 'tasks/**/*.js', 'test/**/*.js']\n    },\n    sftp: {\n      test: {\n        files: {\n          \"./\": \"tasks/**/*.js\"\n        },\n        options: {\n          path: '/tmp',\n          host: '<%= secret.host %>',\n          username: '<%= secret.username %>',\n          // password auth\n          password: '<%= secret.password %>'\n          // private key auth\n/*\n          privateKey: grunt.file.read('id_rsa'),\n          passphrase: '<%= secret.passphrase %>',\n          */\n          // create directories\n/*\n          path: \"/tmp/does/not/exist/\",\n          createDirectories: true\n          */\n        }\n      }\n    },\n    sshexec: {\n      test: {\n        // single command\n        // command: 'uptime',\n        // multiple commands\n        command: ['uptime', 'ls', 'uptime'],\n        options: {\n          host: secret.host,\n          username: secret.username,\n          // private key auth\n          //privateKey: grunt.file.read(secret.privateKeyPath),\n          passphrase: secret.passphrase\n        }\n      }\n    }\n  });\n\n  // Actually load this plugin's tasks\n  grunt.loadTasks('tasks');\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-beautify');\n  grunt.loadNpmTasks('grunt-bump');\n  grunt.loadNpmTasks('grunt-npm');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Default task.\n  grunt.registerTask('default', ['jshint', 'nodeunit']);\n\n  grunt.registerTask('tidy', ['beautify']);\n\n};","/home/travis/build/npmtest/node-npmtest-grunt-ssh/node_modules/grunt-ssh/tasks/sftp.js":"/*\n * grunt-ssh\n * https://github.com/andrewrjones/grunt-ssh\n *\n * Copyright (c) 2013 Andrew Jones\n * Licensed under the MIT license.\n */\n\nmodule.exports = function (grunt) {\n  'use strict';\n\n  grunt.util = grunt.util || grunt.utils;\n\n  grunt.registerMultiTask('sftp', 'Copy files to a (remote) machine running an SSH daemon.', function () {\n    var utillib = require('./lib/util').init(grunt);\n    var fs = require('fs');\n    var async = require('async');\n    var Connection = require('ssh2');\n    var path = require('path');\n    var sftpHelper = require(\"./lib/sftpHelpers\").init(grunt);\n    var ProgressBar = require('progress');\n\n    var options = this.options({\n      path: '',\n      host: false,\n      username: false,\n      password: false,\n      agent: \"\",\n      port: utillib.port,\n      proxy: {\n        port: utillib.port\n      },\n      minimatch: {},\n      srcBasePath: \"\",\n      destBasePath: \"\",\n      createDirectories: false,\n      directoryPermissions: parseInt(755, 8),\n      showProgress: false,\n      mode: 'upload'\n    });\n\n    var tally = {\n      dirs: 0,\n      files: 0\n    };\n\n    grunt.verbose.writeflags(options, 'Raw Options');\n\n    function setOption(optionName) {\n      var option;\n      if ((!options[optionName]) && (option = grunt.option(optionName))) {\n        options[optionName] = option;\n      }\n    }\n\n    setOption('config');\n\n    if (options.config && grunt.util._(options.config).isString()) {\n      this.requiresConfig(['sshconfig', options.config]);\n      var configOptions = grunt.config.get(['sshconfig', options.config]);\n      options = grunt.util._.extend(options, configOptions);\n    }\n\n    setOption('username');\n    setOption('password');\n    setOption('passphrase');\n    setOption('showProgress');\n\n    // add trailing slash to path if needed\n    if (('' !== options.path) && !options.path.match(/(\\/|\\\\)$/)) {\n      options.path = options.path + '/';\n    }\n\n    if (('' !== options.destBasePath) && !options.destBasePath.match(/(\\/|\\\\)$/)) {\n      options.destBasePath = options.destBasePath + '/';\n    }\n\n    grunt.verbose.writeflags(options, 'Options');\n\n    var files = this.files;\n\n    var c = new Connection();\n    var done = this.async();\n\n    c.on('keyboard-interactive', function(){\n      var prompts = arguments[3];\n      var reply = arguments[4];\n\n      prompts.forEach(function(question){\n        var msg = question.prompt.toLowerCase();\n\n        if (msg.indexOf('password') !== -1){\n          reply([options.password]);\n        }\n      });\n    });\n\n    c.on('connect', function () {\n      grunt.verbose.writeln('Connection :: connect');\n    }).on('ready', function () {\n\n      c.sftp(function (err, sftp) {\n        if (err) {\n          c.end();\n          grunt.log.error(err);\n          return;\n        }\n        sftp.on('end', function () {\n          grunt.verbose.writeln('SFTP :: session end');\n        }).on('close', function (had_error) {\n          grunt.verbose.writeln('SFTP :: session close');\n        });\n\n        async.eachSeries(files, function (file, callback) {\n          var srcFiles = options.mode === 'upload' ? grunt.file.expand(options.minimatch, file.src) : file.orig.src;\n          var fileQueue = [];\n          var functionQueue = [];\n          var paths = [];\n\n          if (options.mode === 'download') {\n            if (srcFiles.length === 0) {\n              return callback(new Error('Unable to copy; no valid remote files were found.'));\n            }\n\n            srcFiles.forEach(function (srcFile) {\n              var downloadSrc = (options.srcBasePath ? options.srcBasePath : options.path) + srcFile;\n              var downloadDest = options.destBasePath ? file.dest.replace(/^\\//, '') : file.dest;\n              var offsetDirectory = '';\n              if (options.srcBasePath.indexOf(options.path) === 0) {\n                offsetDirectory = options.srcBasePath.replace(options.path, \"\");\n              }\n              if (file.dest[file.dest.length - 1] === '/') {\n                downloadDest += srcFile.replace(offsetDirectory, \"\");\n              }\n\n              srcFiles.forEach(function (srcFile) {\n                var destFile = options.path;\n                if (srcFile.indexOf(options.srcBasePath) === 0) {\n                  destFile += srcFile.replace(options.srcBasePath, \"\");\n                } else {\n                  destFile += srcFile;\n                }\n                if (grunt.file.isDir(srcFile)) {\n                  if (paths.indexOf(destFile) === -1) {\n                    paths.push(destFile);\n                  }\n                } else {\n                  fileQueue.push({\n                    src: srcFile,\n                    dest: destFile\n                  });\n                }\n                var pathName = path.dirname(destFile);\n                if (paths.indexOf(pathName) === -1) {\n                  paths.push(pathName);\n                }\n              });\n              if (options.destBasePath) {\n                downloadDest = options.destBasePath + downloadDest;\n              }\n\n              var count = 1;\n              var downloadingRecursive = function (src, dest) {\n                sftp.open(src, 'r', function (err, buffer) {\n                  if (err) {\n                    return callback(err);\n                  }\n                  sftp.fstat(buffer, function (err, stats) {\n                    if (err) {\n                      return callback(err);\n                    }\n                    var isDirectory = stats.isDirectory();\n                    if (isDirectory) {\n                      grunt.verbose.writeln(\"Checking existence of path \" + dest);\n                      fs.exists(dest, function (exists) {\n                        var recursiveCallback = function (directorySrc, directoryDest) {\n                          sftp.readdir(directorySrc, function (err, list) {\n                            if (err) {\n                              return callback(err);\n                            }\n                            count--;\n                            count += list.length;\n                            if (!count) {\n                              callback();\n                            }\n                            list.forEach(function (item) {\n                              downloadingRecursive(path.join(directorySrc, item.filename), path.join(directoryDest, item.filename));\n                            });\n                          });\n                        };\n                        if (!exists) {\n                          if (!options.createDirectories) {\n                            callback();\n                            return;\n                          }\n                          fs.mkdir(dest, options.directoryPermissions, function () {\n                            recursiveCallback(src, dest);\n                          });\n                        } else {\n                          recursiveCallback(src, dest);\n                        }\n                      });\n                    } else {\n                      var fpOptions = {\n                        chunkSize: options.chunkSize\n                      };\n                      var downloadFile = function (fileSrc, fileDest) {\n                        grunt.verbose.writeln('downloading ' + fileSrc + ' to ' + fileDest);\n                        sftp.fastGet(fileSrc, fileDest, fpOptions, function (err) {\n                          if (err) {\n                            return callback(err);\n                          }\n                          grunt.verbose.writeln('download ' + fileSrc + ' to ' + fileDest);\n                          tally.files++;\n                          count--;\n                          if (!count) {\n                            callback();\n                          }\n                        });\n                      };\n\n                      if (options.showProgress) {\n                        sftp.open(src, 'r', function (err, buffer) {\n                          sftp.fstat(buffer, function (err, stats) {\n                            if (err) {\n                              return callback(err);\n                            }\n                            var fileSize = stats.size;\n                            var barTemplate = src + ' [:bar] :percent of ' + utillib.fileSizeReadable(fileSize);\n\n                            var bar = new ProgressBar(barTemplate, {\n                              complete: '=',\n                              incomplete: ' ',\n                              width: 20,\n                              total: fileSize\n                            });\n\n                            fpOptions.step = function (totalSent, lastSent, total) {\n                              bar.tick(lastSent);\n                            };\n                            downloadFile(src, dest);\n                          });\n                        });\n                      } else {\n                        downloadFile(src, dest);\n                      }\n                    }\n                  });\n                });\n              };\n              var recursiveMkdir = function (dir, mode, callback) {\n                var existsFunction = fs.exists || path.exists;\n\n                existsFunction(dir, function (exists) {\n                  if (exists) {\n                    return callback(null);\n                  }\n\n                  var current = path.resolve(dir);\n                  var parent = path.dirname(current);\n\n                  recursiveMkdir(parent, mode, function (err) {\n                    if (err) {\n                      return callback(err);\n                    }\n\n                    fs.mkdir(current, mode, function (err) {\n                      if (err) {\n                        return callback(err);\n                      }\n                      callback();\n                    });\n                  });\n                });\n              };\n              if (options.createDirectories) {\n                recursiveMkdir(path.dirname(downloadDest), options.directoryPermissions, function () {\n                  downloadingRecursive(downloadSrc, downloadDest);\n                });\n              } else {\n                downloadingRecursive(downloadSrc, downloadDest);\n              }\n            });\n          } else {\n            if (options.mode === 'upload') {\n              if (srcFiles.length === 0) {\n                return callback(new Error('Unable to copy; no valid source files were found.'));\n              }\n\n              // TODO - before we start copying files ensure all\n              // the directories we are copying into will exist, otherwise\n              // the async thingie causes problems\n\n              srcFiles.forEach(function (srcFile) {\n                if (grunt.file.isDir(srcFile)) {\n                  return;\n                }\n                var destFile = options.path;\n                if (srcFile.indexOf(options.srcBasePath) === 0) {\n                  destFile += srcFile.replace(options.srcBasePath, \"\");\n                } else {\n                  destFile += srcFile;\n                }\n                fileQueue.push({\n                  src: srcFile,\n                  dest: destFile\n                });\n                var pathName = path.dirname(destFile);\n                if (paths.indexOf(pathName) === -1) {\n                  paths.push(pathName);\n                }\n              });\n\n              async.eachSeries(paths, function (path, callback) {\n\n                if (!options.createDirectories) {\n                  callback();\n                  return;\n                }\n\n                grunt.verbose.writeln(\"Checking existence of path \" + path);\n                sftpHelper.sftpRecursiveMkDir(sftp, path, {\n                  permissions: options.directoryPermissions\n                }, function (result, msg) {\n                  if (!result) {\n                    callback(new Error(msg));\n                  } else {\n                    callback();\n                    tally.dirs++;\n                  }\n                });\n              }, function (err) {\n                if (err) {\n                  callback(new Error('Path creation failed: ' + err));\n                  return;\n                }\n\n                async.eachSeries(fileQueue, function (file, callback) {\n                  var fpOptions = {\n                    chunkSize: options.chunkSize\n                  };\n\n                  if (options.showProgress) {\n                    var fileSize = fs.statSync(file.src).size;\n                    var barTemplate = file.src + ' [:bar] :percent of ' + utillib.fileSizeReadable(fileSize);\n\n                    var bar = new ProgressBar(barTemplate, {\n                      complete: '=',\n                      incomplete: ' ',\n                      width: 20,\n                      total: fileSize\n                    });\n\n                    fpOptions.step = function (totalSent, lastSent, total) {\n                      bar.tick(lastSent);\n                    };\n                  }\n\n                  grunt.verbose.writeln('copying ' + file.src + ' to ' + file.dest);\n                  sftp.fastPut(file.src, file.dest, fpOptions, function (err) {\n                    if (err) {\n                      return callback(err);\n                    }\n                    grunt.verbose.writeln('copied ' + file.src + ' to ' + file.dest);\n                    tally.files++;\n                    callback();\n                  });\n                }, function (err) {\n                  callback(err);\n                });\n              });\n            }\n          }\n        }, function (err) {\n          if (err) {\n            grunt.fail.warn(err);\n          }\n          c.end();\n        });\n      });\n\n    }).on('error', function (err) {\n      grunt.fail.warn('Connection :: error :: ' + err);\n    }).on('debug', function (message) {\n      grunt.log.debug('Connection :: debug :: ' + message);\n    }).on('end', function () {\n      grunt.verbose.writeln('Connection :: end');\n    }).on('close', function (had_error) {\n      if (had_error) {\n        grunt.log.error(had_error);\n      }\n\n      grunt.log.writeln((\n      tally.dirs ? 'Created ' + tally.dirs.toString().cyan + ' directories, copied ' : 'Copied ') + (tally.files ? tally.files.toString().cyan + ' files' : ''));\n      grunt.verbose.writeln('Connection :: close');\n      done();\n    });\n\n    var connectionOptions = utillib.parseConnectionOptions(options);\n    connectionOptions.tryKeyboard = true;\n    if (options.proxy.host) {\n      var proxyConnectionOptions = utillib.parseConnectionOptions(options.proxy);\n      var proxyConnection = new Connection();\n      proxyConnection.on('connect', function () {\n        grunt.verbose.writeln('Proxy connection :: connect');\n      });\n      proxyConnection.on('error', function (err) {\n        grunt.fail.warn('Proxy connection :: error :: ' + err);\n      });\n      proxyConnection.on('ready', function() {\n        grunt.verbose.writeln('Proxy connection :: ready');\n        proxyConnection.exec('nc ' + connectionOptions.host + ' ' + connectionOptions.port, function(err, stream) {\n          if (err) {\n            proxyConnection.end();\n            throw err;\n          }\n          connectionOptions.sock = stream;\n          c.connect(connectionOptions);\n        });\n      });\n      proxyConnection.connect(proxyConnectionOptions);\n    }\n    else {\n      c.connect(connectionOptions);\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-grunt-ssh/node_modules/grunt-ssh/tasks/sshexec.js":"/*\n * grunt-ssh\n * https://github.com/andrewrjones/grunt-ssh\n *\n * Copyright (c) 2013 Andrew Jones\n * Licensed under the MIT license.\n */\n\n// TODO: use passphrase\n// TODO: unit tests\nmodule.exports = function (grunt) {\n  'use strict';\n\n  grunt.util = grunt.util || grunt.utils;\n\n  grunt.registerMultiTask('sshexec', 'Executes a shell command on a remote machine', function () {\n    var utillib = require('./lib/util').init(grunt);\n    var Connection = require('ssh2');\n    var c = new Connection();\n\n    var done = this.async();\n\n    var commands = utillib.validateStringArrayAndProcess('command', this.data.command);\n\n    var options = this.options({\n      config: false,\n      host: false,\n      username: false,\n      password: false,\n      agent: \"\",\n      agentForward: false,\n      port: utillib.port,\n      proxy: {\n        port: utillib.port\n      },\n      ignoreErrors: false,\n      minimatch: {},\n      pty: {},\n      suppressRemoteErrors: false,\n      callback: function() {}\n    });\n\n    grunt.verbose.writeflags(options, 'Raw Options');\n\n    function setOption(optionName) {\n      var option;\n      if ((!options[optionName]) && (option = grunt.option(optionName))) {\n        options[optionName] = option;\n      }\n    }\n    setOption('config');\n\n    if (options.config && grunt.util._(options.config).isString()) {\n      this.requiresConfig(['sshconfig', options.config]);\n      var configOptions = grunt.config.get(['sshconfig', options.config]);\n      options = grunt.util._.extend(options, configOptions);\n    }\n\n    setOption('username');\n    setOption('password');\n    setOption('passphrase');\n\n    grunt.verbose.writeflags(options, 'Options');\n\n    c.on('keyboard-interactive', function(){\n      var prompts = arguments[3];\n      var reply = arguments[4];\n\n      prompts.forEach(function(question){\n        var msg = question.prompt.toLowerCase();\n\n        if (msg.indexOf('password') !== -1){\n          reply([options.password]);\n        }\n      });\n    });\n\n    c.on('connect', function () {\n      grunt.verbose.writeln('Connection :: connect');\n    });\n    c.on('ready', function () {\n      grunt.verbose.writeln('Connection :: ready');\n      execCommand();\n    });\n    c.on('error', function (err) {\n      grunt.fail.warn('Connection :: error :: ' + err);\n    });\n    c.on('debug', function (message) {\n      grunt.log.debug('Connection :: debug :: ' + message);\n    });\n    c.on('end', function () {\n      grunt.verbose.writeln('Connection :: end');\n    });\n    c.on('close', function (had_error) {\n      grunt.verbose.writeln('Connection :: close');\n      grunt.verbose.writeln('finishing task');\n      done();\n    });\n\n\n    function execCommand() {\n      if (commands.length === 0) {\n        c.end();\n      } else {\n        var command = commands.shift();\n        grunt.verbose.writeln('Executing :: ' + command);\n        c.exec(command, options, function (err, stream) {\n          if (err) {\n            throw err;\n          }\n          var out;\n          stream.on('data', function (data, extended) {\n            out = String(data);\n            if (extended === 'stderr') {\n              if (!options.suppressRemoteErrors) {\n                grunt.log.warn(out);\n              }\n              else {\n                grunt.verbose.warn(out);\n              }\n            } else {\n              grunt.log.write(out);\n            }\n          });\n          stream.on('end', function () {\n            grunt.verbose.writeln('Stream :: EOF');\n            if (out && typeof options.callback === \"function\") {\n              options.callback(out.trim());\n            }\n          });\n          stream.on('exit', function () {\n            grunt.verbose.writeln('Stream :: exit');\n          });\n          stream.on('close', function (code, signal) {\n            grunt.verbose.writeln('Stream :: close :: code: ' + code + ', signal: ' + signal);\n            if (!options.ignoreErrors && code !== 0) {\n              grunt.fail.warn('Error executing task ' + command);\n              c.end();\n            } else {\n              execCommand();\n            }\n          });\n        });\n      }\n    }\n\n    var connectionOptions = utillib.parseConnectionOptions(options);\n    connectionOptions.tryKeyboard = true;\n    if (options.proxy.host) {\n      var proxyConnectionOptions = utillib.parseConnectionOptions(options.proxy);\n      var proxyConnection = new Connection();\n      proxyConnection.on('connect', function () {\n        grunt.verbose.writeln('Proxy connection :: connect');\n      });\n      proxyConnection.on('error', function (err) {\n        grunt.fail.warn('Proxy connection :: error :: ' + err);\n      });\n      proxyConnection.on('ready', function() {\n        grunt.verbose.writeln('Proxy connection :: ready');\n        proxyConnection.exec('nc ' + connectionOptions.host + ' ' + connectionOptions.port, function(err, stream) {\n          if (err) {\n            proxyConnection.end();\n            throw err;\n          }\n          connectionOptions.sock = stream;\n          c.connect(connectionOptions);\n        });\n      });\n      proxyConnection.connect(proxyConnectionOptions);\n    }\n    else {\n      c.connect(connectionOptions);\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-grunt-ssh/node_modules/grunt-ssh/tasks/lib/sftpHelpers.js":"/*\n * grunt-ssh\n * https://github.com/andrewrjones/grunt-ssh\n *\n * Copyright (c) 2013 Andrew Jones\n * Licensed under the MIT license.\n */\nexports.init = function (grunt) {\n  'use strict';\n  var exports = {};\n  exports.sftpRecursiveMkDir = function (c, path, attributes, finalCallback) {\n    var pathParts = path.split(\"/\").filter(function (part) {\n      return part !== \"\";\n    });\n    var currentPath = \"/\";\n    var ptr = 0;\n\n    var mkdir = function (path, callback) {\n      c.stat(currentPath, function (error, stat) {\n        if (error) {\n          grunt.verbose.writeln(\"Creating \" + currentPath);\n          c.mkdir(currentPath, attributes, function (error) {\n            if (error) {\n              finalCallback(false, \"Failed to create \" + path + \" \" + error);\n            }\n            else {\n              callback(true);\n            }\n          });\n        } else {\n          callback(true);\n        }\n      });\n    };\n\n    var mkdirCallback = function () {\n      if (ptr === pathParts.length) {\n        finalCallback(true);\n        return;\n      }\n      currentPath += (ptr > 0 ? \"/\" : \"\") + pathParts[ptr];\n      ptr++;\n      mkdir(currentPath, mkdirCallback);\n    };\n\n    mkdir(currentPath, mkdirCallback);\n  };\n\n  exports.sftpCD = function (c, path, attributes, createIfRequired, callback) {\n    grunt.verbose.writeln(\"cd to \" + path);\n    c.opendir(path, function (error, handle) {\n      if (error && createIfRequired) {\n        grunt.verbose.writeln(path + \" does not exist, creating.\");\n        exports.sftpRecursiveMkDir(c, path, attributes, callback);\n      }\n      else if (error) {\n        callback(false);\n      }\n      else {\n        callback(true);\n      }\n    });\n  };\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-ssh/node_modules/grunt-ssh/tasks/lib/util.js":"/*\n * grunt-ssh\n * https://github.com/andrewrjones/grunt-ssh\n *\n * Copyright (c) 2013 Andrew Jones\n * Licensed under the MIT license.\n */\nexports.init = function (grunt) {\n  'use strict';\n\n  var exports = {};\n\n  exports.port = 22;\n\n  // Ensures the string is set and valid\n  exports.validateString = function (name, string) {\n    if (!string) {\n      grunt.warn('Missing ' + name + ' property.');\n      return false;\n    }\n    if (grunt.util._.isFunction(string)) {\n      string = string(grunt);\n    }\n    if (!grunt.util._(string).isString()) {\n      grunt.warn('The ' + name + ' property must be a string.');\n      return false;\n    }\n    return string;\n  };\n\n  // Ensures the string is set and valid then processes the template\n  exports.validateStringAndProcess = function (name, string) {\n    return grunt.template.process(exports.validateString(name, string));\n  };\n\n  exports.validateStringArrayAndProcess = function (name, strings) {\n    if (!strings) {\n      grunt.warn('Missing ' + name + ' property.');\n      return false;\n    }\n    if (grunt.util._.isFunction(strings)) {\n      strings = strings(grunt);\n    }\n    if (grunt.util._(strings).isString()) {\n      return [grunt.template.process(strings)];\n    } else if (grunt.util._(strings).isArray()) {\n      var processed = [];\n      for (var i = 0; i < strings.length; i++) {\n        var string = strings[i];\n        if (!grunt.util._(string).isString()) {\n          grunt.warn('The ' + name + ' property must be a string or array of strings.');\n          processed = false;\n          break;\n        } else {\n          processed.push(grunt.template.process(string));\n        }\n      }\n      return processed;\n    } else {\n      grunt.warn('The ' + name + ' property must be a string or array of strings.');\n      return false;\n    }\n  };\n\n  // Ensures the number is set and valid\n  exports.validateNumber = function (name, number) {\n    if (!number && number !== 0) {\n      grunt.warn('Missing ' + name + ' property.');\n      return false;\n    }\n    if (!grunt.util._(number).isNumber()) {\n      grunt.warn('The ' + name + ' property must be a number.');\n      return false;\n    }\n    return number;\n  };\n\n  exports.parseConnectionOptions = function (options) {\n    var connectionOptions = {\n      host: options.host,\n      port: options.port,\n      username: options.username,\n      readyTimeout: options.readyTimeout,\n      agentForward: options.agentForward\n    };\n\n    if (options.privateKey) {\n      connectionOptions.privateKey = options.privateKey.trim();\n\n      if (options.passphrase) {\n        connectionOptions.passphrase = options.passphrase.trim();\n      }\n    }\n    else if (options.password) {\n      connectionOptions.password = options.password;\n      if (options.agent) {\n        connectionOptions.agent = options.agent;\n      }\n    } else {\n      connectionOptions.agent = options.agent;\n    }\n\n    return connectionOptions;\n  };\n\n  // Converts a file size in bytes into a human-readable file size string.\n  exports.fileSizeReadable = function (bytes) {\n    var KB = 1024,\n        MB = KB * 1024,\n        GB = MB * 1024,\n        result;\n\n    if (bytes < KB) {\n      result = bytes + 'B';\n    }\n    else if (bytes < MB) {\n      result = Math.floor(bytes / KB) + 'KB';\n    }\n    else if (bytes < GB) {\n      result = Math.floor(bytes / MB) + 'MB';\n    }\n    else {\n      result = Math.floor(bytes / GB) + 'GB';\n    }\n\n    return result;\n  };\n\n  return exports;\n};"}